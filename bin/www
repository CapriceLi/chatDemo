#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ava:server');
var http = require('http');
var WebSocket = require('ws');
var url = require('url');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// web-socket
const wss = new WebSocket.Server({server});

let websocketArr = [];

wss.on('connection', function connection(ws) {
    const location = url.parse(ws.upgradeReq.url, true);
    let pathName = location.pathname;
    let Id = pathName.substring(1, pathName.length);
    websocketArr[Id] = ws;
    //websocketArr.push({chatCode: chatCode, ws: ws});
    console.log("server connect:"+Id);
    //console.log("location"+location.pathname);


    ws.on('message', function incoming(message) {

        let arr = message.split(':');
        let socket = websocketArr[arr[0]];
        // websocketArr[arr[0]].send(message);
        if(socket!=null){
            socket.send(message);
        }

    });
    ws.on('close', function close() {
        for (let websocket of websocketArr) {
            if (websocket == ws) {
                console.log(websocket.key);
                websocketArr.splice();
                break;
            }
        }
    });

    //ws.send('something');

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}




